createdAt: "2018-04-16T14:56:57.572Z"
updatedAt: "2018-04-16T03:05:24.348Z"
content: '''
  # libusb write 
  ```cpp
  int main(int argc, char *argv[])
  {
  	libusb_device **devs; //pointer to pointer of device, used to retrieve a list of devices
  	libusb_device_handle *dev_handle; //a device handle
  	libusb_context *ctx = NULL; //a libusb session
  	int r; //for return values
  	ssize_t cnt; //holding number of devices in list
  	r = libusb_init(&ctx); //initialize the library for the session we just declared
  	if (r < 0) {
  		//cout << "Init Error " << r << endl; //there was an error
  		printf("Init error\\n");
  		return 1;
  	}
  	libusb_set_debug(ctx, 3); //set verbosity level to 3, as suggested in the documentation
  
  	cnt = libusb_get_device_list(ctx, &devs); //get the list of devices
  	if (cnt < 0) {
  		//cout << "Get Device Error" << endl; //there was an error
  		printf("GET device error\\n");
  		return 1;
  	}
  	//cout << cnt << " Devices in list." << endl;
  	printf("devices in list\\n");
  
  	dev_handle = libusb_open_device_with_vid_pid(ctx, 0x08ff, 0x0009 ); //these are vendorID and productID I found for my usb device
  	if (dev_handle == NULL)
  		//cout << "Cannot open device" << endl;
  		printf("cannot open device\\n");
  	else
  		//cout << "Device Opened" << endl;
  		printf("device opened\\n");
  	libusb_free_device_list(devs, 1); //free the list, unref the devices in it
  
  	unsigned char *data = "abcd";// {'a', 'b', 'c', 'd'}; // = new unsigned char[4]; //data to write
  	data[0] = 'a';data[1] = 'b';data[2] = 'c';data[3] = 'd'; //some dummy values
  	//printf("%c", data[1]);
  
  
  	int actual; //used to find out how many bytes were written
  	if (libusb_kernel_driver_active(dev_handle, 0) == 1) { //find out if kernel driver is attached
  		printf( "Kernel Driver Active\\n");
  		if (libusb_detach_kernel_driver(dev_handle, 0) == 0) //detach it
  			printf( "Kernel Driver Detached!\\n");
  	}
  	r = libusb_claim_interface(dev_handle, 0); //claim interface 0 (the first) of device (mine had jsut 1)
  	if (r < 0) {
  		printf( "Cannot Claim Interface\\n");
  		return 1;
  	}
  	printf( "Claimed Interface\\n");
  	printf("Writing Data...\\n");
  	r = libusb_bulk_transfer(dev_handle, (2 | LIBUSB_ENDPOINT_OUT), data, 4, &actual, 0); //my device's out endpoint was 2, found with trial- the device had 2 endpoints: 2 and 129
  	if (r == 0 && actual == 4) //we wrote the 4 bytes successfully
  		printf("Writing Successful!\\n");
  	else
  		printf("Write Error\\n");
  
  	r = libusb_release_interface(dev_handle, 0); //release the claimed interface
  	if (r != 0) {
  		printf("Cannot Release Interface\\n");
  		return 1;
  	}
  	printf("Released Interface\\n");
  
  	//printf( "Data->" << data << "<-\\n"); //just to see the data we want to write : abcd
  	
  	libusb_close(dev_handle); //close the device we opened
  	libusb_exit(ctx); //needs to be called to end the
  }
  ```
'''
folder: "2d318b1023a78a20fa3c"
title: "libusb write"
type: "MARKDOWN_NOTE"
tags: []
isStarred: false
isTrashed: false
